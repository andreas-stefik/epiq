use Libraries.Game.Game
use Libraries.Game.Scenes.Scene
use Libraries.System.File
use Libraries.Interface.Item2D
use Libraries.Interface.Events.KeyboardListener
use Libraries.Interface.Events.KeyboardEvent

/*
    This is a default class for creating a game in Quorum. Note that the Main 
    action begins by calling StartGame(), which loads a window a game can 
    be displayed in. The action CreateGame is where the game should load any 
    assets, like images to be displayed, frames of animation, or sounds to be
    played. 
*/
class Main is Game, KeyboardListener
    /* Notice we moved these definitions up here. These are called "fields" 
       and they are available to be used anywhere in our program.
    */
    Item2D player = undefined
    Item2D npc = undefined
    /*
        This action, Main, starts our computer program. In Quorum, programs always
        begin from Main.
    */
    action Main
        StartGame()
    end

    /*
        Inside of this template, we load up a scene from on disk. 
        The game automatically knows and can read these files.
    */
    action CreateGame
        File file
        file:SetPath("Scenes/Scene.qs")
        LoadScene(file)

        //Get the items from the scene, like the last tutorial
        //But now we put them in fields up above.
        player = FindItem2DByName("Player")
        npc = FindItem2DByName("NPC")

        //Register a keyboard listener to get messages when the user types
        AddKeyboardListener(me)
    end

    /*
        The update action is called on every "frame" of animation in a game. This
        action should be used to do operations on items. So, for example, we 
        might use this action to change frames of animation, to rotate items, 
        or to make creatures jump.
    */
    action Update(number seconds)
    end

    /*  When a key is pressed, this code executes.
        Press CTRL + J (PC) or CMD + J on the word "KeyboardEvent" to jump to 
        that location and see what code lives there. This is helpful to learn all of
        the commands. Note that memorizing them is not the norm. 
     */
    action PressedKey(KeyboardEvent event)
        integer code = event:keyCode
        number x = player:GetX()
        number y = player:GetY()

        //this means move by 20 pixels
        number amount = 20
        if code = event:UP
            player:SetY(y + amount)
        elseif code = event:DOWN
            player:SetY(y - amount)
        elseif code = event:LEFT
            player:SetX(x - amount)
        elseif code = event:RIGHT
            player:SetX(x + amount)
        end
    end

    /* When a key is released, this code executes */
    action ReleasedKey(KeyboardEvent event)
    end
end